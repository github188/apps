#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import commands
import getopt
import json
import sqlite3
import time

from os.path import join, getsize

os.chdir(os.path.dirname(sys.argv[0]))
LOG_FILE = "/opt/log/jw-log.db"
LOG_PATH = os.path.dirname(LOG_FILE)
if os.path.exists(LOG_PATH) == False:
	os.mkdir(LOG_PATH) 
class IArgs:
	def __init__(self):
		self.list_set = False
		self.id_set = ''
		self.id_state = False
		self.module_set = ''
		self.category_set = ''
		self.event_set = ''
		self.page_set = 0
		self.coun_set = 10
		self.search_set = ''
		self.timeStart_set = ''
		self.timeEnd_set = ''

def AUsage(err=""):
	if err != "":
		print '##命令参数不正确，错误提示： %s' % err
	else:
		print '##命令参数不正确，请检查要执行的命令模式！'
	print """
loglist --list [ < --id <log_id> > | < --module <module> --category <category> --event <event> --page <int> --coun <int>  --search <content> --start <timeStart> --end <timeEnd> >]		##输出查询列表
"""
	sys.exit(-1)

long_opt = ['list', 'id=','module=', 'category=', 'event=', 'page=', 'coun=', 'search=', 'start=', 'end=']

def main():
	try:
		opts, args = getopt.gnu_getopt(sys.argv[1:], '', long_opt)
	except getopt.GetoptError, e:
		AUsage(e)

	iArgs = IArgs()
	for opt,arg in opts:
		if opt == '--list':
			iArgs.list_set = True
		elif opt == '--id':
			iArgs.id_set = arg
			iArgs.id_state = True
		elif opt == '--module':
			iArgs.module_set = arg
		elif opt == '--category':
			iArgs.category_set = arg
		elif opt == '--event':
			iArgs.event_set = arg
		elif opt == '--search':
			iArgs.search_set = arg
		elif opt == '--page':
			iArgs.page_set = arg
		elif opt == '--coun':
			iArgs.coun_set = arg
		elif opt == '--start':
			iArgs.timeStart_set = arg
		elif opt == '--end':
			iArgs.timeEnd_set = arg

	if iArgs.list_set == True:
		__List__(iArgs)
	else:
		AUsage()

class list_info():
	def __init__(self):
		self.id = 1
		self.date = ''
		self.module = ''
		self.category = ''
		self.event = ''
		self.content = ''

def __List__(value):
	cx = sqlite3.connect(LOG_FILE)
	cu = cx.cursor()
	if value.id_state == True:
		id = int(value.id_set)
		sql = 'select * from jwlog where id = %d' % id
		cu.execute(sql) 
		res = cu.fetchall()
		json_info = {}
		json_info['id'] = res[0][0]
		json_info['date'] = res[0][1]
		json_info['module'] = res[0][2]
		json_info['category'] = res[0][3]
		json_info['event'] = res[0][4]
		json_info['content'] = res[0][5]
	else:
		sqlwhere = ''
		if value.module_set != "":
			sqlwhere += ' and module = "'+value.module_set+'"'
		if value.category_set != "":
			sqlwhere += ' and category = "'+value.category_set+'"'
		if value.event_set != "":
			sqlwhere += ' and event = "'+value.event_set+'"'
		if value.search_set != "":
			sqlwhere += ' and content LIKE "%'+value.search_set+'%"'
		if value.timeStart_set != "":
			sqlwhere += ' and date >= "'+value.timeStart_set+'"'
		if value.timeEnd_set != "":
			sqlwhere += ' and date < "'+value.timeEnd_set+'"'
		page = int(value.page_set)
		coun = int(value.coun_set)
		Start = 0
		limit = ''
		if page > 0:
			Start = coun * page - coun
			limit = 'limit %s,%s'%(Start,coun)
		cu.execute('select count() from jwlog where 1=1 %s' %(sqlwhere)) 
		count = cu.fetchall()[0][0]
		cu.execute('select * from jwlog where 1=1%s order by id desc %s' %(sqlwhere,limit)) 
		res = cu.fetchall()
		list = []
		json_info = {'total':0, 'rows':[]}
		for line in res:
			out = list_info()
			out.id = line[0]
			out.date = line[1]
			out.module = line[2]
			out.category = line[3]
			out.event = line[4]
			out.content = line[5]
			list.append(out.__dict__)
		json_info['total'] = count
		json_info['rows'] = list
	cu.close()
	print json.dumps(json_info, encoding="UTF-8", ensure_ascii=False)
	
if __name__ == '__main__':
	main()
	

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import getopt
import json
os.chdir(os.path.dirname(sys.argv[0]))

from libtarget import *
from libvolume import *
from liblun import *


class iSCSIArgs:
	def __init__(self):
		self.mode = ''
		self.list_set = False
		self.target_name_set = False
		self.target_name_str = ''
		self.modify_set = False
		self.attr_set = False
		self.attr_str = ''
		self.value_set = False
		self.value_str = ''
		self.add_set = False
		self.remove_set = False
		self.remove_str = ''
		self.name_set = False
		self.name_str = ''
		self.detail_set = False
		self.detail_set = ''
		self.udv_set = False
		self.udv_str = ''
		self.blocksize_set = False
		self.blocksize_str = ''
		self.lun_read_only_set = False
		self.lun_read_only_str = ''
		self.read_only_set = False
		self.read_only_str = ''
		self.nv_cache_set = False
		self.nv_cache_str = ''
		self.map_set = False
		self.unmap_set = False
		self.lun_set = False
		self.lun_id_set = False
		self.lun_id_str = ''
		self.volume_name_set = False
		self.volume_name_str = ''
		self.udv_set = False
		self.udv_str = ''
		self.force_close_set = False
		self.force_close_str = ''
		self.get_privilage_set = False

	def setMode(self, mode):
		if self.mode == '':
			self.mode = mode

def DictDump(row_list):
	return row_list

def DefaultDump(row_list):
	rows = []
	for row in row_list:
		rows.append(row.__dict__)
	return rows

class UniOutput:
	def __init__(self, row_list, dump = DefaultDump):
		self.total = 0
		self.rows = []
		#for row in row_list:
		#	self.rows.append(row.__dict__)
		#self.total = len(self.rows)
		self.rows = dump(row_list)
		self.total = len(self.rows)

		print json.dumps(self.__dict__, encoding="UTF-8", ensure_ascii=False, sort_keys = False, indent = 4)
		sys.exit(0)

# 处理Target相关参数
def iscsiTargetProc(args = iSCSIArgs()):
	if args.mode != '--target':
		return

	if args.list_set:
		UniOutput(iSCSIGetTargetList(args.target_name_str))
	elif args.modify_set:
		if args.name_str == '':
			iscsiExit(False, '请输入被操作的Target名称!')
		elif args.attr_str == '':
			iscsiExit(False, '请输入设置的属性名称!')
		elif args.value_str == '':
			iscsiExit(False, '请输入设置的属性取值!')
		else:
			ret,msg = iSCSISetTargetAttr(args.name_str, args.attr_str, args.value_str)
			if ret:
				iscsiExit(True, '设置Target %s 属性 %s 为 %s 成功!' % (args.name_str, args.attr_str, args.value_str))
			else:
				iscsiExit(False, '设置Target %s 属性 %s 为 %s 失败!' % (args.name_str, args.attr_str, args.value_str))
	elif args.add_set:
		iscsiExit(False, '暂不支持添加Target操作!')
	elif args.remove_set:
		iscsiExit(False, '暂不支持删除Target操作!')
	else:
		iscsiExit(False, '缺少参数!')
	return

def iscsiAddVolume(args = iSCSIArgs()):
	if not len(args.udv_str):
		iscsiExit(False, '请输入UDV名称!')
	try:
		blocksize = 512
		if len(args.blocksize_str):
			blocksize = int(args.blocksize_str)

		read_only = 'disable'
		if len(args.read_only_str):
			read_only = args.read_only_str

		nv_cache = 'enable'
		if len(args.nv_cache_str):
			nv_cache = args.nv_cache_str
	except:
		pass
	return iSCSIVolumeAdd(args.udv_str, blocksize, read_only, nv_cache)

# 处理数据卷相关参数
def iscsiVolumeProc(args = iSCSIArgs()):
	if args.mode != '--volume':
		return

	if args.list_set:
		UniOutput(iSCSIVolumeGetList(args.volume_name_str))
	elif args.add_set:
		ret,msg = iscsiAddVolume(args) 
		iscsiExit(ret, msg)
	elif args.remove_set:
		if not len(args.remove_str):
			iscsiExit(False, '请设置需要删除的iSCSI数据卷名称!')
		else:
			ret,msg = iSCSIVolumeRemove(args.remove_str)
			iscsiExit(ret, msg)
	else:
		iscsiExit(False, '缺少参数!')

# 处理LUN相关参数
def iscsiLunProc(args = iSCSIArgs()):
	if args.mode != '--lun':
		return

	if args.list_set:
		if len(args.lun_id_str):
			iscsiExit(False, '暂不支持获取指定LUN ID信息！')
		UniOutput(iSCSILunGetList(args.target_name_str), DictDump)
	elif args.map_set:
		# check if add volume first
		if args.add_set:
			ret,msg = iscsiAddVolume(args) 
			if not ret:
				iscsiExit(ret, msg)
			volume_name = getVolumeByUdv(args.udv_str)
			if not volume_name:
				iscsiExit(False, '无法获取iSCSI数据卷名称!')
			args.volume_name_str = volume_name
		if not len(args.target_name_str):
			iscsiExit(False, '请输入Target名称!')
		elif not len(args.volume_name_str):
			iscsiExit(False, '请输入iSCSI数据卷名称!')
		elif not len(args.lun_id_str):
			iscsiExit(False, '请输入LUN ID!')
		elif not len(args.lun_read_only_str):
			iscsiExit(False, '请输入读写属性!')
		else:
			ret,msg = iSCSILunMap(args.target_name_str, args.volume_name_str,
					args.lun_id_str, args.lun_read_only_str)
			iscsiExit(ret, msg)
	elif args.unmap_set:
		if not len(args.target_name_str):
			iscsiExit(False, '请输入Target名称!')
		elif not len(args.lun_id_str):
			iscsiExit(False, '请输入LUN ID!')
		try:
			ret,msg = iSCSILunUnmap(args.target_name_str, int(args.lun_id_str))
			iscsiExit(ret, msg)
		except:
			sys.exit(-1)
	elif args.get_privilage_set:
		if not len(args.udv_str):
			iscsiExit(False, '请输入需要查询的用户数据卷名称！')
		priv = iSCSILunGetPrivilage(args.udv_str)
		if priv != {}:
			print json.dumps(priv, indent = 4)
			sys.exit(0)
		else:
			iscsiExit(False, '用户数据卷 %s 不存在！' % args.udv_str)
	else:
		iscsiExit(False, '缺少参数!')

# 处理Session相关参数
def iscsiSessionProc(args = iSCSIArgs()):
	if args.mode == '--session':
		icsiExit(False, '暂不支持此操作')
	return

def iscsiUsage():
	print """
iscsi --target --list [--target-name <name>]
      --target --modify --name <name> --attribute <key> --value <value>
      --target --add --name <name>
      --target --remove <name>

      --volume --list [--volume-name <name>]
      --volume --add --udv <name> [--blocksize <size> --read-only <enable|disable> --nv-cache <enable|disable>]
      --volume --remove <volume_name>

      --lun --list [--target-name <name> [--lun-id <id>]]
      --lun --map --target-name <name> --volume-name <name> --lun-id <id|auto> --lun-read-only <enable|disable|auto>
      --lun --map --target-name <name> --add --udv <name> [--block-size <size> --nv-cache <enable|disable>] --lun-id <id|auto> --lun-read-only <enable|disable|auto>
      --lun --unmap --target-name <target_name> --lun-id <id>
      --lun --get-privilage --udv <name>

      --session --list [--target-name <name>]
      --session --force-close <session_id>
"""
	sys.exit(-1)


OP_MODE = ['--target', '--volume', '--lun', '--session']

iscsi_long_opt = ['target', 'list', 'target-name=',
	'modify', 'attribute=', 'value=',
	'add', 'remove=', 'name=', 'get-detail=',
	'volume', 'udv=', 'block-size=', 'read-only=', 'nv-cache=',
	'lun', 'map', 'lun-id=', 'unmap', 'get-privilage', 'target-name=',
	'session', 'volume-name=', 'lun-read-only=']

def iscsi_main():
	try:
		opts, args = getopt.gnu_getopt(sys.argv[1:], '', iscsi_long_opt)
	except getopt.GetoptError, e:
		iscsiExit(False, '%s' % e)

	iscsiArgs = iSCSIArgs()
	for opt,arg in opts:
		# mode set
		if opt in OP_MODE:
			iscsiArgs.setMode(opt)

		# args proc
		if opt == '--list':
			iscsiArgs.list_set = True
		elif opt == '--target-name':
			iscsiArgs.target_name_set = True
			iscsiArgs.target_name_str = arg
		elif opt == '--volume-name':
			iscsiArgs.volume_name_set = True
			iscsiArgs.volume_name_str = arg
		elif opt == '--modify':
			iscsiArgs.modify_set = True
		elif opt == '--attribute':
			iscsiArgs.attr_set = True
			iscsiArgs.attr_str = arg
		elif opt == '--value':
			iscsiArgs.value_set = True
			iscsiArgs.value_str = arg
		elif opt == '--add':
			iscsiArgs.add_set = True
		elif opt == '--remove':
			iscsiArgs.remove_set = True
			iscsiArgs.remove_str = arg
		elif opt == '--name':
			iscsiArgs.name_set = True
			iscsiArgs.name_str = arg
		elif opt == '--get-detail':
			iscsiArgs.detail_set = True
			iscsiArgs.detail_str = arg
		elif opt == '--udv':
			iscsiArgs.udv_set = True
			iscsiArgs.udv_str = arg
		elif opt == '--block-size':
			iscsiArgs.blocksize_set = True
			iscsiArgs.blocksize_str = arg
		elif opt == '--lun-read-only':
			iscsiArgs.lun_read_only_set = True
			iscsiArgs.lun_read_only_str = arg
		elif opt == '--read-only':
			iscsiArgs.read_only_set = True
			iscsiArgs.read_only_str = arg
		elif opt == '--nv-cache':
			iscsiArgs.nv_cache_set = True
			iscsiArgs.nv_cache_str = arg
		elif opt == '--lun-id':
			iscsiArgs.lun_id_set = True
			iscsiArgs.lun_id_str = arg
		elif opt == '--target-name':
			iscsiArgs.target_name_set = True
			iscsiArgs.target_name_str = arg
		elif opt == '--map':
			iscsiArgs.map_set = True
		elif opt == '--unmap':
			iscsiArgs.unmap_set = True
		elif opt == '--get-privilage':
			iscsiArgs.get_privilage_set = True

	iscsiTargetProc(iscsiArgs)
	iscsiVolumeProc(iscsiArgs)
	iscsiLunProc(iscsiArgs)
	iscsiSessionProc(iscsiArgs)

	iscsiUsage()

if __name__ == "__main__":
	iscsi_main()

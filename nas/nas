#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import getopt
import json
os.chdir(os.path.dirname(sys.argv[0]))

from libnas import *

def DictDump(row_list):
	return row_list

def DefaultDump(row_list):
	rows = []
	for row in row_list:
		rows.append(row.__dict__)
	return rows

class UniOutput:
	def __init__(self, row_list, dump = DefaultDump):
		self.total = 0
		self.rows = []
		#for row in row_list:
		#	self.rows.append(row.__dict__)
		#self.total = len(self.rows)
		self.rows = dump(row_list)
		self.total = len(self.rows)

		#print json.dumps(self.__dict__, encoding="UTF-8", ensure_ascii=False, sort_keys = False, indent=4)
		print json.dumps(self.__dict__, encoding="UTF-8", ensure_ascii=False, sort_keys = False)
		sys.exit(0)


def nasExit(ret = True, msg = ''):
	ret_msg = {'status':True, 'msg':''}
	ret_msg['status'] = ret
	ret_msg['msg'] = msg
	print json.dumps(ret_msg, encoding="UTF-8", ensure_ascii=False)
	if ret:
		sys.exit(0)
	sys.exit(-1)

def nasUsage():
	print """
nas --list [--volume <name>]
    --map --udv <name> [--filesystem <ext3|ext4>]
    --unmap --volume <name>
    --misc --update-cfg
"""
	sys.exit(-1)

OP_MODE = ['--list', '--map', '--unmap', '--misc']
nas_long_opt = ['list', 'volume=', 'map', 'udv=', 'unmap', 'filesystem=', 'misc', 'update-cfg']

def nas_main():
	try:
		opts, args = getopt.gnu_getopt(sys.argv[1:], '', nas_long_opt)
	except getopt.GetoptError, e:
		nasExit(False, '未识别的命令参数: %s' % e)

	arg_op_mode = ''
	arg_volume = ''
	arg_udv = ''
	arg_fs = 'ext4'
	arg_update = False
	for opt,arg in opts:
		if opt in OP_MODE:
			arg_op_mode = opt
			continue
		if opt == '--volume':
			arg_volume = arg
		elif opt == '--udv':
			arg_udv = arg
		elif opt == '--filesystem':
			arg_fs = arg
		elif opt == '--update-cfg':
			arg_update = True

	if arg_op_mode == '--list':
		UniOutput(nasGetList(arg))
	elif arg_op_mode == '--map':
		ret,msg = nasMapping(arg_udv, arg_fs)
		nasExit(ret, msg)
	elif arg_op_mode == '--unmap':
		ret,msg = nasUnmapping(arg_volume)
		nasExit(ret, msg)
	elif arg_op_mode == '--misc':
		if arg_update:
			ret,msg = nasUpdateCfg()
			nasExit(ret, msg)

	nasUsage()


if __name__ == '__main__':
	nas_main()

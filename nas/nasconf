#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import commands
import getopt
import json
os.chdir(os.path.dirname(sys.argv[0]))

from libnasconf import *

class IArgs:
	def __init__(self):
		self.mode = ''
		self.list_set = False
		self.add_set = False
		self.edit_set = False
		self.del_set = False
		self.check_set = False
		self.default_set = False
		self.basic_set = False
		self.access_set = False
		self.nasallow_set = False
		self.nfsallow_set = False
		self.sync_set = False
		self.level_set = 3
		self.name_set = ''
		self.new_set = ''
		self.comment_set = ''
		self.comment_state = False
		self.path_set = ''
		self.write_set = ''
		self.read_set = ''
		self.invalid_set = ''
		self.valid_set = ''
		self.browsable_state = False
		self.browsable_set = 'yes'
		self.oplocks_state = False
		self.oplocks_set = 'no'
		self.ftpwrite_set = 'no'
		self.public_set = 'yes'
		self.inherit_set = 'yes'
		self.allow_set = ''

	def setMode(self, mode):
		if self.mode == '':
			self.mode = mode

#~ 恢复默认置
def get_default():
	conf = """[global]
workgroup = WORKGROUP
server string = %h
security = share
#security = user
passdb backend = smbpasswd
smb passwd file = /etc/samba/smbpasswd
config file = /etc/samba/smb.conf
username map = /etc/samba/smbusers
encrypt passwords = Yes
username level = 0
map to guest = Bad User
null password = yes
max log size = 10
name resolve order = bcast wins
socket options = TCP_NODELAY SO_KEEPALIVE SO_SNDBUF=262144 SO_RCVBUF=131072
os level = 20
preferred master = no
dns proxy = No
guest account = guest
directory mask = 0777
create mask = 0777
oplocks = no
locking = yes
disable spoolss = yes
load printers = no
dos charset = UTF8
display charset = UTF8
force directory security mode = 0000
template shell = /bin/sh
veto files = /.AppleDB/.AppleDouble/.AppleDesktop/:2eDS_Store/Network Trash Folder/Temporary Items/TheVolumeSettingsFolder/.@__thumb/.@__desc/:2e*/
delete veto files = yes
map archive = no
map system = no
map hidden = no
map read only = no
deadtime = 10
use sendfile = yes
unix extensions = no
store dos attributes = yes
client ntlmv2 auth = yes
dos filetime resolution = no
inherit acls = yes
wide links = yes
min receivefile size = 4096
case sensitive = auto
domain master = auto
local master = yes

"""
	conf_file = open(SMB_CONF_PATH, 'w')
	try:
		conf_file.write(conf)
		conf_file.close()
	finally:
		conf_file.close()

	print '##恢复出厂设置成功。\n'
	AUsage()
	sys.exit(-1)


if os.path.exists(SMB_CONF_PATH) == False:
	get_default()

OP_MODE = ['--list', '--add', '--edit', '--del', '--check', '--default', '--sync']
long_opt = ['list', 'add', 'edit', 'del', 'check', 'default','sync', 'level=', 'name=', 'path=', 'write=', 'read=', 'invalid=', 'browsable=', 'oplocks=', 'ftpwrite=', 'public=', 'inherit=', 'comment=', 'basic', 'new=', 'access', 'nasallow', 'allow=', 'nfsallow']

def main():
	try:
		opts, args = getopt.gnu_getopt(sys.argv[1:], '', long_opt)
	except getopt.GetoptError, e:
		AUsage(e)

	iArgs = IArgs()
	for opt,arg in opts:
		if opt in OP_MODE:
			iArgs.setMode(opt)

		if opt == '--list':
			iArgs.list_set = True
		elif opt == '--add':
			iArgs.add_set = True
		elif opt == '--edit':
			iArgs.edit_set = True
		elif opt == '--del':
			iArgs.del_set = True
		elif opt == '--check':
			iArgs.check_set = True
		elif opt == '--default':
			iArgs.default_set = True
		elif opt == '--basic':
			iArgs.basic_set = True
		elif opt == '--access':
			iArgs.access_set = True
		elif opt == '--nasallow':
			iArgs.nasallow_set = True
		elif opt == '--nfsallow':
			iArgs.nfsallow_set = True
		elif opt == '--sync':
			iArgs.sync_set = True
		elif opt == '--level':
			iArgs.level_set = arg
		elif opt == '--name':
			iArgs.name_set = arg
		elif opt == '--new':
			iArgs.new_set = arg
		elif opt == '--comment':
			iArgs.comment_set = arg
			iArgs.comment_state = True
		elif opt == '--path':
			iArgs.path_set = arg
		elif opt == '--write':
			iArgs.write_set = arg
		elif opt == '--read':
			iArgs.read_set = arg
		elif opt == '--invalid':
			iArgs.invalid_set = arg
		elif opt == '--valid':
			iArgs.valid_set = arg
		elif opt == '--browsable':
			iArgs.browsable_set = arg
			iArgs.browsable_state = True
		elif opt == '--oplocks':
			iArgs.oplocks_set = arg
			iArgs.oplocks_state = True
		elif opt == '--ftpwrite':
			iArgs.ftpwrite_set = arg
		elif opt == '--public':
			iArgs.public_set = arg
		elif opt == '--inherit':
			iArgs.inherit_set = arg
		elif opt == '--allow':
			iArgs.allow_set = arg

	if iArgs.list_set == True:
		nas_list(iArgs)
	elif iArgs.add_set == True:
		add(iArgs)
	elif iArgs.edit_set == True:
		edit(iArgs)
	elif iArgs.del_set == True:
		NASdel(iArgs)
	elif iArgs.check_set == True:
		check(iArgs)
	elif iArgs.default_set == True:
		get_default()
	elif iArgs.sync_set == True:
		get_sync(iArgs)
	else:
		AUsage()

if __name__ == '__main__':
	main()

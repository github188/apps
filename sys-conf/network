#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import commands
import getopt
import json
import xml.dom.minidom
import subprocess
import codecs

os.chdir(os.path.dirname(sys.argv[0]))

reload(sys)
sys.setdefaultencoding('utf8')

FILEPATH='/opt/network_conf.xml'
DEFAULT_INTER_PATH = '/etc/network/interfaces'
BOND_CONF = '/opt/bond_conf.sh'

BOND_LIST = ['bond0', 'bond1']

#~ 执行系统命令并输出结果
def SYSTEM_OUT(com):
	p = subprocess.Popen(com, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	s = p.stdout.readline()
	return s

#~ print SYSTEM_OUT('ifconfig -a |grep \' Link \'|sed \'/^lo/d\'|awk \'{print $1 ","}\'|awk \'{printf $0}\'|sed \'s/.$//\'')

def LICENSE_SER():
	return 4

def INCLIST():
	#~ ####调用系统命令方法
	#~ p = subprocess.Popen('ifconfig -a |grep \' Link \'|sed \'/^lo/d\'|awk \'{print $1 ","}\'|awk \'{printf $0}\'|sed \'s/.$//\'', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	#~ s = p.stdout.readline()
	#~ print s.split(',')
	#for line in p.stdout.readlines():
		#print line,
	#retval = p.wait()
	#~ print x.getAttribute('name'),x.getAttribute('ip'), x.getAttribute('mode')

	license = LICENSE_SER()
	if license == 6:
		NIC_LIST = ['eth0', 'eth1', 'eth2', 'eth3', 'eth4', 'eth5', 'bond0', 'bond1']
	elif license == 5:
		NIC_LIST = ['eth0', 'eth1', 'eth2', 'eth3', 'eth4', 'bond0', 'bond1']
	else:
		NIC_LIST = ['eth0', 'eth1', 'eth2', 'eth3','bond0', 'bond1']
	return NIC_LIST


def Export(ret = True, msg = ''):
	ret_msg = {'status':True, 'msg':''}
	ret_msg['status'] = ret
	ret_msg['msg'] = msg
	print json.dumps(ret_msg, encoding="UTF-8", ensure_ascii=False)

def makeEasyTag(dom, tagname, value, type='text'):
	tag = dom.createElement(tagname)
	if value.find(']]>') > -1:
		type = 'text'
	if type == 'text':
		value = value.replace('&', '&amp;')
		value = value.replace('<', '&lt;')
		text = dom.createTextNode(value)
	elif type == 'cdata':
		text = dom.createCDATASection(value)
		tag.appendChild(text)
	return tag
	
def write_xml_file(path, xmlDom, option = {'encoding':'utf-8'}):
	#write_xml_file(path, xmlDom)保存XML
	defaultOption = {'encoding' : 'utf-8'}
	for k, v in defaultOption.iteritems():
		if k not in option:
			option[k] = v

	try:
		f=file(path, 'wb')
		writer = codecs.lookup(option['encoding'])[3](f)
		xmlDom.writexml(writer, encoding = option['encoding'])
		writer.close()
		return True
	except:
		return False
	
dom = xml.dom.minidom.parse(FILEPATH)#打开DOM
root = dom.documentElement #获取根接点
item = root.getElementsByTagName('nic')

#~ 设置网关
def SET_GW(nic,value):
	Status = False
	coxx = SYSTEM_OUT('ip route|grep "default"|wc -l')
	for i in item:
		i.setAttribute('default','') 
		if i.getAttribute('name') == nic:
			if i.getAttribute('mode') != 'dhcp':
				if value.gw_set != '':
					i.setAttribute('gw', value.gw_set) 
					i.setAttribute('default', 'yes') 
					Status = True
				else:
					i.setAttribute('gw', '') 
					i.setAttribute('default', '') 
			else:
				if value.default_gw_set ==  True:
					i.setAttribute('default', 'yes')
				
	if int(coxx) > 0:
		for x in range(int(coxx)):
			os.system('route delete default')
	if Status == True:
		os.system('route add default gw '+value.gw_set)	

def SET_IFCONFIG(nic,str):
	if nic in BOND_LIST:
		sys.exit(-1)
		
	for x in item:
		if x.getAttribute('name') == nic:
			x.setAttribute('mode', 'static') 
			if str.ip_set == "" :
				Export(False, 'IP地址不能为空')
				sys.exit(-1)
			x.setAttribute('ip', str.ip_set) 
			if str.mask_set == "" :
				Export(False, '子网掩码不能为空')
				sys.exit(-1)
			x.setAttribute('mask', str.mask_set)
			os.system('ifconfig ' + nic + ' '  + str.ip_set +' netmask '  + str.mask_set)
			SET_GW(str.iface_set, str)
	
def SET_DHCP(nic,str):
	for x in item:
		if x.getAttribute('name') == nic and x.getAttribute('name') != 'bond0' and x.getAttribute('name') != 'bond1':
			x.setAttribute('mode', 'dhcp') 
			if str.default_gw_set == True:
				SET_GW(str.iface_set, str)
			os.system('ifdown '+ nic +' > /dev/null; ifup '+ nic +' > /dev/null')

#~ 设置bond
def BOND_SET(bond, value):	
	inter_split = value.inter_set.split(',')
	comm = 'echo +' + bond + ' > /sys/class/net/bonding_masters; echo ' + value.mode_set + ' > /sys/class/net/' + bond + '/bonding/mode; '
	nic_set = ''
	bond_strator = False
	if len(inter_split) > 1:
		for x in item:
			for nic in inter_split:
				if nic in INCLIST() and nic != 'bond0' and nic != 'bond1':
					if x.getAttribute('name') == nic:
						x.setAttribute('bond', bond)
						nic_set = nic_set + 'ifdown ' + nic + ' > /dev/null; echo +' + nic + ' > /sys/class/net/' + bond + '/bonding/slaves; '
				else:
					Export(False, '输入的接口名不正确--')
					sys.exit(-1)
			if x.getAttribute('name') == bond:
				if x.getAttribute('mode') != 'no':
					editbond = 'echo ' + value.mode_set + ' > /sys/class/net/' + bond + '/bonding/mode; ifconfig ' + bond + ' ' + value.ip_set + ' netmask ' + value.mask_set 
					bond_strator = True
				if value.mode_set == '':
					Export(False, '负载均衡模式没有设置，请参考命令参数：')
					networkUsage()					
				if value.ip_set == '':
					Export(False, 'ip地址没有设置，请参考命令参数：')
					networkUsage()					
				if value.mask_set == '':
					Export(False, '子网掩码没有设置，请参考命令参数：')
					networkUsage()					
				x.setAttribute('iflist', value.inter_set)
				x.setAttribute('ip', value.ip_set)
				x.setAttribute('mask', value.mask_set)
				x.setAttribute('mode', value.mode_set)
				comm = comm + 'ifconfig ' + bond + ' ' + value.ip_set + ' netmask ' + value.mask_set + ' up; '
	else:
		Export(False, '启用负载均衡至少需要2块网卡')
		sys.exit(-1)
	if bond_strator == True:
		os.system(editbond)
	else:
		os.system(comm + nic_set)
	SET_GW(bond, value)
				

#~ 卸载bond
def BOND_REMOVE(bond):	
	IFUP = 'echo -' + bond + ' > /sys/class/net/bonding_masters '
	xremove = 'ifconfig ' + bond + ' down > /dev/null; '
	Status = False
	for x in item:
		if x.getAttribute('name') == bond:
			if x.getAttribute('mode') != 'no':
				Status = True
				x.setAttribute('mode', 'no') 
				x.setAttribute('iflist', '') 
			x.setAttribute('default', '') 
		if x.getAttribute('bond') != '':
			IFUP = "ifup "+ x.getAttribute('name') +" > /dev/null; " + IFUP
			xremove = 'echo -'+ x.getAttribute('name') +' > /sys/class/net/bond0/bonding/slaves; ' + xremove
			x.setAttribute('bond', '') 
	if Status == True:
		os.system(xremove + IFUP)
		#~ Export(True, '负载均衡接口" %s "卸载成功！' % bond)
	#~ else:
		#~ Export(False, '%s 接口没有启用！' % bond)

	
	

#item = root.getElementsByTagName('eth0')[0] #获取第一个等于名称的接点
#item.setAttribute('ip', '192.168.70.10') #设置接点的属性
#~ print root.childNodes


#~ item = root.getElementsByTagName('nic')
#~ for x in item:
	#~ print x.getAttribute('name'),x.getAttribute('ip'), x.getAttribute('mode')
	
#~ write_xml_file('/opt/network_conf.xml', dom)

class IArgs:
	def __init__(self):
		self.mode = ''
		self.list_set = False
		self.default_set = False
		self.ifconfig_set = False
		self.bond_set = False
		self.dns_set = False
		self.dnsvar_set = ''
		self.iface_set = ''
		self.dhcp_set = False
		self.default_gw_set = False
		self.ip_set = ''
		self.mask_set = ''
		self.gw_set = ''
		self.inter_set = ''
		self.remove_set = False
		self.mode_set = ''
		self.filter_set = False

	def setMode(self, mode):
		if self.mode == '':
			self.mode = mode
			
class nic_info():
	def __init__(self):
		self.Network_Name = ''
		self.Network_Mode = ''
		self.Network_IP = ''
		self.Network_Mask = ''
		self.Network_Gateway = ''
		self.Network_Bond = ''
		self.Network_Default = ''
		self.Network_Iflist = ''

#~ 输出列表
def nic_list(value):
	list = []
	json_list = {'total':0, 'rows':[]}
	i = 0
	for x in item:
		if value.iface_set == '':
			if value.filter_set == False:
				if x.getAttribute('name') in INCLIST():
					nic = nic_info()
					nic.Network_Name = x.getAttribute('name')
					nic.Network_Mode = x.getAttribute('mode')
					nic.Network_IP = x.getAttribute('ip')
					nic.Network_Mask = x.getAttribute('mask')
					nic.Network_Gateway = x.getAttribute('gw')
					nic.Network_Bond = x.getAttribute('bond')
					nic.Network_Default = x.getAttribute('default')
					if x.getAttribute('name') in BOND_LIST:
						nic.Network_iflist = x.getAttribute('iflist')
					list.append(nic.__dict__)
					i = i + 1
			else:
				if x.getAttribute('name') != 'bond0' and x.getAttribute('name') != 'bond1':
					nic = nic_info()
					nic.Network_Name = x.getAttribute('name')
					nic.Network_Mode = x.getAttribute('mode')
					nic.Network_IP = x.getAttribute('ip')
					nic.Network_Mask = x.getAttribute('mask')
					nic.Network_Gateway = x.getAttribute('gw')
					nic.Network_Bond = x.getAttribute('bond')
					nic.Network_Default = x.getAttribute('default')
					if x.getAttribute('name') in BOND_LIST:
						nic.Network_iflist = x.getAttribute('iflist')
					list.append(nic.__dict__)
					i = i + 1				
		else:
			if x.getAttribute('name') == value.iface_set:
				json_info = {'Network_Name':''+x.getAttribute('name')+'', 'Network_Mode':''+x.getAttribute('mode')+'', 'Network_IP':''+x.getAttribute('ip')+'', 'Network_Mask':''+x.getAttribute('mask')+'', 'Network_Gateway':''+x.getAttribute('gw')+'', 'Network_Bond':''+x.getAttribute('bond')+'', 'Network_Default':''+x.getAttribute('default')+'', 'Network_iflist':''+x.getAttribute('iflist')+''}
			
	json_list['total'] = i
	json_list['rows'] = list

	if value.iface_set == '':
		print json.dumps(json_list, encoding="UTF-8", ensure_ascii=False)
	else:
		print json.dumps(json_info, encoding="UTF-8", ensure_ascii=False)
		
	
	#~ for x in item:
		#~ if x.getAttribute('name') == 'dns':
			#~ x.setAttribute('addr', value.dnsvar_set)
#~ 恢复默认置
def get_default(value):
	conf = """#请不要直接修改本配置文件
#修改IP地址请使用 network 命令\n
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
address 192.168.10.100
netmask 255.255.255.0
gateway 192.168.10.1

auto eth1
iface eth1 inet static
address 192.168.11.100
netmask 255.255.255.0

auto eth2
iface eth2 inet static
address 192.168.12.100
netmask 255.255.255.0

auto eth3
iface eth3 inet static
address 192.168.13.100
netmask 255.255.255.0

"""
	if LICENSE_SER() == 5:
		conf = conf +"""auto eth4
iface eth4 inet static
address 192.168.14.100
netmask 255.255.255.0
"""
	if LICENSE_SER() == 6:
		conf = conf +"""auto eth5
iface eth5 inet static
address 192.168.15.100
netmask 255.255.255.0
"""
	
	xml_str = """<?xml version="1.0" encoding="utf-8"?>
<network>
	<nic bond="" default="yes" gw="192.168.10.1" ip="192.168.10.100" mask="255.255.255.0" mode="static" name="eth0"/>
	<nic bond="" default="" gw="" ip="192.168.11.100" mask="255.255.255.0" mode="static" name="eth1"/>
	<nic bond="" default="" gw="" ip="192.168.12.100" mask="255.255.255.0" mode="static" name="eth2"/>
	<nic bond="" default="" gw="" ip="192.168.13.100" mask="255.255.255.0" mode="static" name="eth3"/>
	<nic bond="" default="" gw="" ip="192.168.14.100" mask="255.255.255.0" mode="static" name="eth4"/>
	<nic bond="" default="" gw="" ip="192.168.15.100" mask="255.255.255.0" mode="static" name="eth5"/>
	<nic bond="" default="" gw="" iflist="" ip="" mask="" mode="no" name="bond0"/>
	<nic bond="" default="" gw="" iflist="" ip="" mask="" mode="no" name="bond1"/>
	<dns addr="202.106.0.20"/>
</network>
"""
	conf_file = open(DEFAULT_INTER_PATH, 'w')
	try:
		conf_file.write(conf)
		conf_file.close()
	finally:
		conf_file.close()

	xml_conf_file = open(FILEPATH, 'w')
	try:
		xml_conf_file.write(xml_str)
		xml_conf_file.close()
	finally:
		xml_conf_file.close()
	
	bond_conf_str = ''
	bond_conf_file = open(BOND_CONF, 'w')
	try:
		bond_conf_file.write(bond_conf_str)
		bond_conf_file.close()
	finally:
		bond_conf_file.close()

	print '网络配置恢复出厂设置成功,需要重启设备才能生效。'

#~ 修改DNS
def DNSAlter(value):
	item = root.getElementsByTagName('dns')[0]
	item.setAttribute('addr', value.dnsvar_set)
	#~ for x in item:
		#~ if x.getAttribute('name') == 'dns':
			#~ x.setAttribute('addr', value.dnsvar_set)

#~ 修改IP
def ifconfigAlter(value):
	if value.iface_set in INCLIST():
		if value.dhcp_set == False:
			SET_IFCONFIG(value.iface_set,value)
		elif value.dhcp_set == True:
			SET_DHCP(value.iface_set,value)
	else:
		Export(False, 'license只允许用%s块网卡,只能使用列表中的网卡%s' % (LICENSE_SER() , INCLIST()))
		sys.exit(-1)

#~ 网络负载均衡设置
def bondAlter(value):
	if value.iface_set in BOND_LIST:
		if value.remove_set == False:
		#~ 开启网络负载均衡
			BOND_SET(value.iface_set, value)
		elif value.remove_set ==True:
		#~ 卸载网络负载均衡
			BOND_REMOVE(value.iface_set)
	else:
		Export(False, '请输入一个接口名称,如：<bond0|bond1>')
		networkUsage()
			
def networkUsage():
	print """
network --list < [--iface <name>] | [--filter] >
	--ifconfig --iface <name> << --dhcp [ --default_gw ] >|< [ --ip <address> --mask <netmask> --gw <gateway> ] >> 
	--bond --iface <bond0|bond1> --inter <eth0,eth1,eth2,eth3,.....> --mode <bonding mode> --ip <address> --mask <netmask> [--gw<gateway>] 
	--bond --remove --iface <bond0|bond1>
	--dns <nameserver1,nameserver2>
	--default
"""
	sys.exit(-1)

OP_MODE = ['--list', '--ifconfig', '--bond', '--dns', '--default']
network_long_opt = ['list', 'filter', 'ifconfig', 'bond', 'dns', 'default', 'iface=', 'dhcp', 'ip=', 'mask=', 'gw=', 'inter=', 'mode=', 'remove', 'default_gw']

def network_main():
	try:
		opts, args = getopt.gnu_getopt(sys.argv[1:], '', network_long_opt)
	except getopt.GetoptError, e:
		Export(False, '命令参数不正确，请检查')
		networkUsage()

	iArgs = IArgs()
	for opt,arg in opts:
		# mode set
		if opt in OP_MODE:
			iArgs.setMode(opt)

		# args proc
		if opt == '--list':
			iArgs.list_set = True
		elif opt == '--ifconfig':
			iArgs.ifconfig_set = True
		elif opt == '--bond':
			iArgs.bond_set = True
		elif opt == '--dns':
			iArgs.dns_set = True
			if len(args) >= 1:
				iArgs.dnsvar_set = args[0]
		elif opt == '--iface':
			iArgs.iface_set = arg
		elif opt == '--dhcp':
			iArgs.dhcp_set = True
		elif opt == '--ip':
			iArgs.ip_set = arg
		elif opt == '--mask':
			iArgs.mask_set = arg
		elif opt == '--gw':
			iArgs.gw_set = arg
		elif opt == '--mode':
			iArgs.mode_set = arg
		elif opt == '--inter':
			iArgs.inter_set = arg
		elif opt == '--remove':
			iArgs.remove_set = True
		elif opt == '--filter':
			iArgs.filter_set = True
		elif opt == '--default':
			iArgs.default_set = True
		elif opt == '--default_gw':
			iArgs.default_gw_set = True
			if iArgs.gw_set == '':
				Export(False, '网关不能为空！')
				sys.exit(-1)

	if iArgs.list_set == True:
		nic_list(iArgs)
	elif iArgs.default_set == True:
		get_default(iArgs)
	elif iArgs.ifconfig_set == True:
		ifconfigAlter(iArgs)
		write_xml_file(FILEPATH, dom)
		os.system('netconfig_get')
		Export(True, '设置成功！')
	elif iArgs.bond_set == True:
		bondAlter(iArgs)
		write_xml_file(FILEPATH, dom)
		os.system('netconfig_get')
		Export(True, '设置成功！')
	elif iArgs.dns_set == True:
		DNSAlter(iArgs)
		write_xml_file(FILEPATH, dom)
		os.system('netconfig_get')
		Export(True, '设置成功！')
	else:
		Export(False, '命令参数不正确，请检查要执行的命令模式！')
		networkUsage()
		Export(True, '设置成功！')

if __name__ == '__main__':
	network_main()


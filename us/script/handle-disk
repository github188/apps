#!/usr/bin/env python
# -*- coding: utf-8 -*-

# -----------------------------------------------------------------------------
# 文件名称: handle_disk
# 作用: 处理磁盘上下线事件
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# 输入参数格式:
#     argv[0] - (this program)
#     argv[1] - disk dev (eg. /dev/sdb)
#     argv[2] - action <add|remove|change>
# -----------------------------------------------------------------------------

import sys,os
from libmd import *
from libdisk import *

reload(sys)
sys.setdefaultencoding('utf8')


# -------- 磁盘信息定义 -----------
class DiskInfo():
	def __init__(self):
		self.dev = ''		# eg. /dev/sdb
		self.slot = ''
		self.uuid = ''
		self.md_uuid = ''

def get_disk_info(disk_dev):
	info = DiskInfo()
	info.dev = disk_dev
	info.slot = disk_slot(disk_dev)
	ret,txt = commands.getstatusoutput('mdadm -E %s' % disk_dev)
	if ret == 0:
		for line in txt.split('\n'):
			if line.find('Device UUID : ') >= 0:
				info.uuid = line.split('Device UUID : ')[-1]
			elif line.find('Array UUID : ') >= 0:
				info.md_uuid = line.split('Array UUID : ')[-1]
	return info


# -------------------------------------------------------------------------
#    实用函数
# -------------------------------------------------------------------------

# 记录日志
def __md_event_log(event, content):
	LogInsert('VG', 'Auto', event, content)

# 蜂鸣器告警
def __buzzer_alarm():
	os.popen('set-buzzer.sh on')

def __run_ext_cmd(cmd):
	ret,msg = commands.getstatusoutput(cmd)
	return True if ret == 0 else False

# 从指定卷组删除掉盘的磁盘
def __remove_disk_from_md(mdinfo, diskinfo):
	__run_ext_cmd('mdadm --set-faulty %s %s 2>&1' % (mdinfo['dev'], dev_trim(diskinfo.dev)))
	if __run_ext_cmd('mdadm --remove %s %s 2>&1' % (mdinfo['dev'], dev_trim(diskinfo.dev))):
		__md_event_log('Info', '从卷组 %s 删除掉线磁盘 %s 成功!' % (mdinfo['name'], diskinfo.slot))
	else:
		__md_event_log('Info', '从卷组 %s 删除掉线磁盘 %s 失败!' % (mdinfo['name'], diskinfo.slot))
	tmpfs_remove_disk_from_md(mdinfo, diskinfo)

# 将磁盘加入指定卷组
def __add_disk_to_md(mdinfo, diskinfo):
	cmd = 'mdadm --add %s %s 2>&1' % (mdinfo['dev'], diskinfo.dev)
	ret,msg = commands.getstatusoutput(cmd)
	if ret == 0:
		__md_event_log('Info', '卷组 %s 所属磁盘 %s 重新加入卷组操作成功! 卷组重建开始!' % (mdinfo['name'], diskinfo.slot))
	else:
		__md_event_log('Warning', '卷组 %s 所属磁盘 %s 重新加入卷组操作失败!' % (mdinfo['name'], diskinfo.slot))


"""
# ---------------  获取不同级别的md状态 -------------------
# 返回的状态: normal,degrade,fail,rebuild,initial,unknown

def __md_level0_jbod_state(mdinfo):
	return 'normal' if mdinfo['disk_specs'] == mdinfo['disk_working'] else 'fail'

def __md_level1_state(mdinfo):
	if mdinfo['disk_specs'] == mdinfo['disk_working']:
		return 'normal'
	elif mdinfo['disk_working'] < mdinfo['disk_specs']:
		return 'degrade'
	elif mdinfo['disk_working'] == 0:
		return 'fail'
	return 'unknown'

def __md_level5_state(mdinfo):
	_diff = mdinfo['disk_specs'] - mdinfo['disk_working']
	if _diff == 0:
		return 'normal'
	elif _diff == 1:
		return 'degrade'
	elif _diff > 1:
		return 'fail'
	return 'unknown'

def __md_level6_state(mdinfo):
	_diff = mdinfo['disk_specs'] - mdinfo['disk_working']
	if _diff == 0:
		return 'normal'
	elif _diff <= 2:
		return 'degrade'
	elif _diff > 2:
		return 'fail'
	return 'unknown'

def __md_level10_state(mdinfo):
	return 'unknown'  # because raid10 not supported currently

__level_state = {'0' : __md_level0_jbod_state,
		'JBOD' : __md_level0_jbod_state,
		'1' : __md_level1_state,
		'5' : __md_level5_state,
		'6' : __md_level6_state,
		'10' : __md_level10_state}
"""

def __get_md_state(mdinfo):
	#return __level_state[mdinfo['raid_level']](mdinfo) if mdinfo['raid_level'] in __level_state.keys() else 'unknown'
	return mdinfo['raid_state']

# 使用磁盘槽位号查找所在的卷组信息
def __find_md_by_disk_dev(disk_dev):
	mdinfo = None
	try:
		f = open('/proc/mdstat', 'r')
		for x in f.readlines():
			mddev = re.match('^md\d*', x)
			if mddev is None:
				continue
			if dev_trim(disk_dev) in re.findall('sd\w+', x):
				mdinfo = mddev_get_attr('/dev/%s' % mddev.group())
				break
		f.close()
	except:
		pass
	return mdinfo

# 使用磁盘uuid查找所在卷组信息
def __find_md_by_disk_mduuid(disk_mduuid):
	for mdinfo in md_info()['rows']:
		if disk_mduuid == mdinfo['raid_uuid']:
			return mdinfo
	return None


# 磁盘上线事件触发md相关处理
def __handle_md_disk_add(mdinfo, diskinfo):
	if mdinfo == None:
		return

	if __get_md_state(mdinfo) == 'degrade':
		__add_disk_to_md(mdinfo, diskinfo)
	else:
		__md_event_log('Info', '卷组 %s 非降级状态，无需处理相关的磁盘!' % mdinfo['name'])


# 磁盘下线事件触发md相关处理
def __handle_md_disk_remove(mdinfo, diskinfo):
	if mdinfo == None:
		return
	__remove_disk_from_md(mdinfo, diskinfo)

	mdinfo =  mddev_get_attr(mdinfo['dev'])	# 因为删除磁盘，重新获取状态
	_state = __get_md_state(mdinfo)
	if _state == 'degrade':
		disk = md_get_hotrep(mdinfo['raid_uuid'])
		if disk == {}:
			__md_event_log('Warning', '卷组 %s 降级，未找到热备盘，重建失败!' % mdinfo['name'])
			__buzzer_alarm()
			return
		slot = disk_serial2slot(disk['serial'])
		name = disk_name(slot)
		if __run_ext_cmd('mdadm --add %s %s 2>&1' % (mdinfo['dev'], name)):
			__md_event_log('Info', '卷组 %s 降级，使用 %s 热备盘开始重建操作成功!' % (mdinfo['name'], slot))
			disk_clean_hotrep(slot)
			disk_slot_update(slot)
		else:
			__md_event_log('Warning', '卷组 %s 降级，使用 %s 热备盘开始重建操作失败!' % (mdinfo['name'], slot))
	elif _state == 'fail':
		__md_event_log('Error', '卷组 %s 已经失效，请检查!' % mdinfo['name'])
		__buzzer_alarm()
	else:
		__md_event_log('Error', '卷组 %s 状态出错!当前状态 %s' % (mdinfo['name'], _state))
		__buzzer_alarm()

	return

def __handle_md_event(event, diskinfo):
	if event == 'add':
		__handle_md_disk_add(__find_md_by_disk_mduuid(diskinfo.md_uuid), diskinfo)
	elif event == 'remove':
		__handle_md_disk_remove(__find_md_by_disk_dev(diskinfo.dev), diskinfo)

# 主函数
def main():
	# 参数检查
	if len(sys.argv) < 2:
		# 记录日志，返回
		return

	diskinfo = get_disk_info(sys.argv[1])  # argv[1] - disk_dev

	event = sys.argv[2]
	if event == 'add':
		msg = '磁盘 %s 上线!' % diskinfo.slot if diskinfo.slot != '' else '磁盘上线!'
		__md_event_log('Info', msg)
	elif event == 'remove':
		msg = '磁盘 %s 掉线!' % diskinfo.slot if diskinfo.slot != '' else '磁盘掉线!'
		__md_event_log('Info', msg)
	
	__handle_md_event(event, diskinfo)

if __name__ == "__main__":
	main()

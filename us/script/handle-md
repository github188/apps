#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from libmd import *

def handle_md_sync(mddev):
	mdattr = get_mdattr_by_mddev(mddev)
	md = basename(mddev)
	cmd = 'cat /sys/block/' + md + '/md/sync_action'
	sts,sync_action = commands.getstatusoutput(cmd)
	if sts != 0:
		return None

	msg = '卷组 %s ' % mdattr.name
	if sync_action == 'resync':
		msg += '初始化 开始'
	elif sync_action == 'recover':
		msg += '重建 开始'
	else:
		return None
	
	dir = TMP_RAID_INFO + '/' + md
	if not os.path.exists(dir):
		os.makedirs(dir)
	cmd = 'echo ' + sync_action + ' > ' + dir + '/sync_action'
	os.system(cmd)

	log_insert('VG', 'Auto', 'Info', msg)
	sysmon_event('vg', 'rebuild', mdattr.name, msg)
	sysmon_event('disk', 'led_blink1s1', 'disks=%s' % list2str(mdattr.disk_list, ','), '')
	return

def handle_md_syncdone(mddev):
	mdattr = get_mdattr_by_mddev(mddev)
	md = basename(mddev)
	
	cmd = 'cat ' + TMP_RAID_INFO + '/' + md + '/sync_action'
	sts,sync_action = commands.getstatusoutput(cmd)
	if sts != 0:
		return None
	
	os.remove(TMP_RAID_INFO + '/' + md + '/sync_action')

	msg = '卷组 %s ' % mdattr.name
	if sync_action == 'resync':
		msg += '初始化' 
	elif sync_action == 'recover':
		msg += '重建'
	else:
		return None
	
	# 如果raid6坏2块盘, 第一块盘重建完后, 第二快盘开始重建, 
	# 如果没有启动第二块盘重建, 则认为重建失败
	if mdattr.raid_level == '6':
		if mdattr.raid_state == 'normal':
			msg += ' 完成'
		elif mdattr.raid_state == 'rebuild':
			msg += ' 中止'
		else:
			msg += ' 失败'
	else:
		if mdattr.raid_state == 'normal':
			msg += ' 完成'
		else:
			msg += ' 失败'
	
	log_insert('VG', 'Auto', 'Info', msg)
	sysmon_event('vg', 'normal', mdattr.name, msg)
	sysmon_event('disk', 'led_off', 'disks=%s' % list2str(mdattr.disk_list, ','), '')
	return

# args [0]  - self
#      [1]  - dev eg. /dev/md1
#      [2]  - action 'add', 'remove' ...
def main():
	if len(sys.argv) != 3:
		return

	log = initlog()

	action = sys.argv[2]
	mddev = sys.argv[1]

	log.info('action: %s, mddev: %s' % (action, mddev))
	if 'online' == action:
		tmpfs_add_md(mddev)
	elif 'remove' == action:
		tmpfs_remove_md(mddev)
	elif 'mdsync' == action:
		handle_md_sync(mddev)
	elif 'mdsyncdone'== action:
		handle_md_syncdone(mddev)

if __name__ == "__main__":
	main()
